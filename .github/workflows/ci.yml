name: ci

on:
  push:
    paths:
      - '**/Dockerfile'
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/.github/workflows/ci.yml'

permissions:
  contents: read
  pull-requests: write
  packages: write
  actions: write

env:
  IMAGE_NAME: ${{ github.repository_owner }}/ubuntu-act
  github-token: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.triggering_actor != 'github-actions[bot]'
    strategy:
      matrix:
        include:
          - from-version: '22.04'
            from-distro: 'ubuntu'
            from-flavor: 'act'
          - from-version: '20.04'
            from-distro: 'ubuntu'
            from-flavor: 'act'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create tags for docker buildx
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: |
            ${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && matrix.from-version == '22.04' }}
            type=raw,value=${{ matrix.from-version }}
            type=schedule
            type=ref,event=branch,prefix=${{ matrix.from-version }}-
            type=ref,event=pr
            type=sha,prefix=${{ matrix.from-version }}-

      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./linux/ubuntu/Dockerfile
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            FROM_IMAGE=catthehacker/${{ matrix.from-distro }}
            FROM_FLAVOR=${{ matrix.from-flavor }}
            FROM_VERSION=${{ matrix.from-version }}
            TARGETVERSRION=${{ matrix.from-version }}
          cache-from: |
            type=gha,ref=${{ github.ref }}
            type=gha,ref=refs/heads/main
            type=gha
          cache-to: type=gha,mode=max
          provenance: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          outputs: type=image,name=${{ env.IMAGE_NAME }},push=${{ github.event_name == 'push' }}

  approve-pr:
    name: Merge Pull Request
    runs-on: ubuntu-latest
    needs: [build]
    if: github.triggering_actor == 'mauwii' && github.event_name == 'pull_request' &&  needs.build.result == 'success'
    steps:
      - name: Approve PR
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # - name: Merge PR
      #   run: gh pr merge --auto --merge "$PR_URL"
      #   env:
      #     PR_URL: ${{github.event.pull_request.html_url}}
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Clean cache
        if: ${{ ! contains('refs/heads/main', github.ref) && github.event.pull_request.auto_merge == true }}
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R "${REPO}" -B "${BRANCH}" | cut -f 1)

          if [ -n "$cacheKeysForPR" ]; then
              ## Setting this to not fail the workflow while deleting cache keys.
              set +e
              echo "Deleting caches..."
              for cacheKey in $cacheKeysForPR; do
                  gh actions-cache delete "${cacheKey}" -R "${REPO}" -B "${BRANCH}" --confirm
              done
              echo "Done"
              ## Restore the fail on error.
              set -e
          else
              echo "No cache keys found for this PR"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
